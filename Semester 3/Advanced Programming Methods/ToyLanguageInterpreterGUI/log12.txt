ID: 1
Execution stack: 
(Ref(int) a; (int counter; while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}))
Symbol table: 
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
(int counter; while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Ref(int) a
Symbol table: 
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
(int counter; while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Ref(int) a
Symbol table: 
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
(int counter; while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
(int counter; while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
int counter
Symbol table: 
a -> (0, int)
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
int counter
Symbol table: 
a -> (0, int)
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 2
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 2
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
File table:
Heap memory:


ID: 2
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 3
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
File table:
Heap memory:


ID: 3
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
File table:
Heap memory:


ID: 3
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
File table:
Heap memory:


ID: 3
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 0
Output list: 
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
File table:
Heap memory:
1 -> 0


ID: 3
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 0
Output list: 
File table:
Heap memory:
1 -> 0


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
File table:
Heap memory:
1 -> 0


ID: 3
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 0
Output list: 
File table:
Heap memory:
1 -> 0


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:
1 -> 0


ID: 3
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 0
Output list: 
0
File table:
Heap memory:
1 -> 0


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:
1 -> 0


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:
1 -> 0


ID: 4
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:
1 -> 0


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 4
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
File table:
Heap memory:


ID: 4
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 5
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
File table:
Heap memory:


ID: 5
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
File table:
Heap memory:


ID: 5
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
File table:
Heap memory:


ID: 5
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 1
Output list: 
0
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
File table:
Heap memory:
1 -> 1


ID: 5
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 1
Output list: 
0
File table:
Heap memory:
1 -> 1


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
File table:
Heap memory:
1 -> 1


ID: 5
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 1
Output list: 
0
File table:
Heap memory:
1 -> 1


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:
1 -> 1


ID: 5
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 1
Output list: 
0
1
File table:
Heap memory:
1 -> 1


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:
1 -> 1


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:
1 -> 1


ID: 6
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:
1 -> 1


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 6
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
File table:
Heap memory:


ID: 6
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 7
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
File table:
Heap memory:


ID: 7
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
File table:
Heap memory:


ID: 7
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
File table:
Heap memory:


ID: 7
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
File table:
Heap memory:
1 -> 2


ID: 7
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:
1 -> 2


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
File table:
Heap memory:
1 -> 2


ID: 7
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 2
Output list: 
0
1
File table:
Heap memory:
1 -> 2


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:
1 -> 2


ID: 7
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 2
Output list: 
0
1
2
File table:
Heap memory:
1 -> 2


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:
1 -> 2


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:
1 -> 2


ID: 8
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:
1 -> 2


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 8
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
File table:
Heap memory:


ID: 8
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 9
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
File table:
Heap memory:


ID: 9
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
File table:
Heap memory:


ID: 9
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
File table:
Heap memory:


ID: 9
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
File table:
Heap memory:
1 -> 3


ID: 9
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:
1 -> 3


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
File table:
Heap memory:
1 -> 3


ID: 9
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 3
Output list: 
0
1
2
File table:
Heap memory:
1 -> 3


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 3


ID: 9
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 3
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 3


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 3


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 3


ID: 10
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 3


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 10
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 10
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 11
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 11
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 11
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 11
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 4


ID: 11
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 4


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 4


ID: 11
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 4
Output list: 
0
1
2
3
File table:
Heap memory:
1 -> 4


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 4


ID: 11
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 4
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 4


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 4


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 4


ID: 12
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 4


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 12
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 12
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 13
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 13
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 13
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 13
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 5


ID: 13
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 5


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 5


ID: 13
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 5
Output list: 
0
1
2
3
4
File table:
Heap memory:
1 -> 5


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 5


ID: 13
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 5
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 5


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 5


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 5


ID: 14
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 5


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 14
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 14
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 15
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 15
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 15
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 15
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 6


ID: 15
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 6


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 6


ID: 15
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 6
Output list: 
0
1
2
3
4
5
File table:
Heap memory:
1 -> 6


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 6


ID: 15
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 6
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 6


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 6


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 6


ID: 16
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 6


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 16
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 16
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 17
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 17
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 17
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 17
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 7


ID: 17
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 7


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 7


ID: 17
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
File table:
Heap memory:
1 -> 7


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 7


ID: 17
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 7
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 7


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 7


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 7


ID: 18
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 7


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 18
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 18
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 19
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 19
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 19
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 1
Execution stack: 
((Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1); while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)})
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 19
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 8


ID: 19
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 8


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 8


ID: 19
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
File table:
Heap memory:
1 -> 8


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 8


ID: 19
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 8
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 8


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Fork(Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 8


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 8


ID: 20
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 8


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
counter = counter + 1
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 20
Execution stack: 
Fork((New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 10
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 20
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 21
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 1
Execution stack: 
while(counter < 10){(Fork(Fork((New(a, counter); Print(counter)); counter = counter + 1)}
Symbol table: 
a -> (0, int)
counter -> 10
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 21
Execution stack: 
(New(a, counter); Print(counter))
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 1
Execution stack: 
Symbol table: 
a -> (0, int)
counter -> 10
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 21
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 21
Execution stack: 
Print(counter)
New(a, counter)
Symbol table: 
a -> (0, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:


ID: 21
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 9


ID: 21
Execution stack: 
Print(counter)
Symbol table: 
a -> (1, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
File table:
Heap memory:
1 -> 9


ID: 21
Execution stack: 
Symbol table: 
a -> (1, int)
counter -> 9
Output list: 
0
1
2
3
4
5
6
7
8
9
File table:
Heap memory:
1 -> 9


